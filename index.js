// Public API surface for Explicit Agent Protocol + KG Memory
// ES6 Module imports for available modules
import * as MemoryGraph from "./modules/memory_graph/index.js";
import * as Memory0 from "./modules/memory0_service/index.js";
import * as System from "./modules/system/index.js";
import fs from 'fs/promises';
import path from 'path';

// Mock implementations for missing modules (‡∏à‡∏∞ scaffold ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
const Embedding = {
  // Mock embedding service - ‡∏™‡∏£‡πâ‡∏≤‡∏á vector representations ‡∏à‡∏≤‡∏Å text
  async embedTexts(texts) {
    console.log("‚ö†Ô∏è  Embedding service: Mock mode (‡πÉ‡∏ä‡πâ random vectors)");
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mock vectors ‡∏Ç‡∏ô‡∏≤‡∏î 384 dimensions (standard for many embedding models)
    const mockVectors = texts.map((text, index) => {
      const vector = new Array(384).fill(0);
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á pseudo-random values ‡∏à‡∏≤‡∏Å text length ‡πÅ‡∏•‡∏∞ index
      const seed = text.length + index * 17;
      for (let i = 0; i < 384; i++) {
        vector[i] = (Math.sin(seed + i * 0.1) + 1) / 2 * 0.5; // 0-0.5 range
      }
      return vector;
    });
    
    console.log(`üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á ${mockVectors.length} mock vectors ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${texts.length} texts`);
    return mockVectors;
  }
};

const AutoTag = {
  // Mock auto-tagging service - ‡πÅ‡∏¢‡∏Å keywords ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  async autoTagOnObservations(observations) {
    console.log("‚ö†Ô∏è  Auto-tagging service: Mock mode (keyword extraction)");
    
    const taggedObservations = observations.map(obs => {
      const { entityName, contents } = obs;
      const allText = contents.join(' ');
      
      // Simple keyword extraction (mock implementation)
      const words = allText.toLowerCase()
        .replace(/[^\w\s]/g, '')
        .split(/\s+/)
        .filter(word => word.length > 3 && word.length < 15);
      
      const uniqueWords = [...new Set(words)].slice(0, 5); // Top 5 keywords
      
      return {
        ...obs,
        autoTags: uniqueWords,
        tagConfidence: Array(uniqueWords.length).fill(0.7) // Mock confidence
      };
    });
    
    console.log(`üè∑Ô∏è  ‡∏™‡∏£‡πâ‡∏≤‡∏á auto-tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${taggedObservations.length} observations`);
    return taggedObservations;
  }
};

const Lineage = {
  // Lineage logging system - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å operations ‡πÉ‡∏ô JSON log
  async log(action, data) {
    const logEntry = {
      timestamp: new Date().toISOString(),
      action,
      data: { ...data, user: process.env.USER || 'system' },
      ip: process.env.NODE_ENV === 'production' ? 'remote' : 'localhost'
    };
    
    const logPath = path.join(process.cwd(), 'memory', 'lineage_log.json');
    let logs = [];
    
    try {
      const logData = await fs.readFile(logPath, 'utf8');
      if (logData.trim()) {
        logs = JSON.parse(logData);
      }
    } catch (error) {
      console.log("üìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô lineage log ‡πÉ‡∏´‡∏°‡πà");
    }
    
    // ‡πÄ‡∏Å‡πá‡∏ö logs ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 1000 entries
    logs.unshift(logEntry);
    logs = logs.slice(0, 1000);
    
    try {
      await fs.writeFile(logPath, JSON.stringify(logs, null, 2), 'utf8');
      console.log(`üìù Lineage: ${action} (${data.count || data.entities?.length || 1} items)`);
    } catch (writeError) {
      console.error("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å lineage log:", writeError.message);
    }
    
    return logEntry;
  }
};

// üèóÔ∏è Initialization - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export async function ensureInitialized() {
  console.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Explicit Agent Protocol + KG Memory...");
  
  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
    await System.validateStructure();
    console.log("‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á baseline configuration
    await System.ensureBaseline();
    console.log("‚úÖ Baseline configuration ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    
    // 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° memory graph store
    await MemoryGraph.ensureStore();
    console.log("‚úÖ Memory Graph store ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    
    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Root memory node (#0)
    const rootMemory = await Memory0.ensureRoot();
    console.log(`‚úÖ Root Memory Node (${rootMemory?.name || 'memory0'}) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`);
    
    // 5. Test basic functionality
    console.log("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö basic functionality...");
    const testEntity = await createEntities([{
      name: "test-system",
      type: "system",
      observations: ["Test entity for initialization"]
    }], { autoTag: false, linkToMemory0: true });
    
    console.log(`‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏™‡∏£‡πâ‡∏≤‡∏á ${testEntity.length} test entities`);
    
  } catch (error) {
    console.error("‚ùå Error during system initialization:", error);
    throw new Error(`Initialization failed: ${error.message}`);
  }
}

// üß† Core Memory Operations - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥

export async function createEntities(entities, options = {}) {
  const { autoTag = true, linkToMemory0 = true } = options;
  
  console.log(`üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á ${entities.length} entities`);
  
  try {
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á entities ‡πÉ‡∏ô memory graph
    const created = await MemoryGraph.createEntities(entities);
    
    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å lineage
    await Lineage.log("create_entities", { 
      count: created.length, 
      types: [...new Set(created.map(e => e.type))]
    });
    
    // 3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Root memory (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    if (linkToMemory0 && created.length > 0) {
      const entityNames = created.map(e => e.name);
      await Memory0.linkToRoot(entityNames);
      console.log(`üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${entityNames.length} entities ‡∏Å‡∏±‡∏ö Root`);
    }
    
    // 4. Auto-tagging (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    let finalResult = created;
    if (autoTag) {
      finalResult = await AutoTag.autoTagOnObservations(created);
      await Lineage.log("auto_tagging", { 
        count: finalResult.length, 
        newTags: finalResult.flatMap(r => r.autoTags || []).length 
      });
    }
    
    return finalResult;
    
  } catch (error) {
    console.error("‚ùå Error creating entities:", error);
    await Lineage.log("create_entities_error", { error: error.message, count: entities.length });
    throw error;
  }
}

export async function addObservations(observations, options = {}) {
  const { autoTag = true } = options;
  
  console.log(`üìù ‡πÄ‡∏û‡∏¥‡πà‡∏° ${observations.length} observations`);
  
  try {
    // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° observations ‡πÉ‡∏ô memory graph
    const result = await MemoryGraph.addObservations(observations);
    
    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å lineage
    await Lineage.log("add_observations", { 
      count: observations.length,
      entities: observations.map(o => o.entityName).slice(0, 10) // Log first 10
    });
    
    // 3. Auto-tagging (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    let finalResult = result;
    if (autoTag) {
      finalResult = await AutoTag.autoTagOnObservations(observations);
      await Lineage.log("auto_tag_observations", { 
        count: finalResult.length,
        taggedEntities: finalResult.map(r => r.entityName)
      });
    }
    
    return finalResult;
    
  } catch (error) {
    console.error("‚ùå Error adding observations:", error);
    await Lineage.log("add_observations_error", { error: error.message });
    throw error;
  }
}

export async function createRelations(relations, options = {}) {
  const { linkToMemory0 = false } = options;
  
  console.log(`üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á ${relations.length} relations`);
  
  try {
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á relations ‡πÉ‡∏ô memory graph
    const created = await MemoryGraph.createRelations(relations);
    
    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å lineage
    await Lineage.log("create_relations", { 
      count: created.length,
      types: [...new Set(created.map(r => r.relationType))]
    });
    
    // 3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ entities ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Root (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    if (linkToMemory0) {
      const allNames = new Set();
      relations.forEach(r => {
        allNames.add(r.from);
        allNames.add(r.to);
      });
      
      if (allNames.size > 0) {
        await Memory0.linkToRoot([...allNames]);
        console.log(`üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${allNames.size} unique entities ‡∏Å‡∏±‡∏ö Root`);
      }
    }
    
    return created;
    
  } catch (error) {
    console.error("‚ùå Error creating relations:", error);
    await Lineage.log("create_relations_error", { error: error.message });
    throw error;
  }
}

// üîç Semantic Search - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ semantic similarity
export async function semanticSearch(query, options = {}) {
  const { topK = 8, tagFilter = [], threshold = 0.3 } = options;
  
  console.log(`üîç Semantic search: "${query}" (top ${topK})`);
  
  try {
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query
    const queryVectors = await Embedding.embedTexts([query]);
    const queryVector = queryVectors[0];
    
    // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô memory graph
    const results = await MemoryGraph.semanticSearch(queryVector, { 
      topK, 
      tagFilter, 
      threshold 
    });
    
    // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å lineage
    await Lineage.log("semantic_search", { 
      query: query.substring(0, 50) + '...', 
      topK, 
      results: results.length,
      threshold 
    });
    
    console.log(`‚úÖ ‡∏û‡∏ö ${results.length} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (threshold: ${threshold})`);
    return results;
    
  } catch (error) {
    console.error("‚ùå Error in semantic search:", error);
    await Lineage.log("semantic_search_error", { error: error.message, query });
    throw error;
  }
}

// üè∑Ô∏è Tag Management - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ tags ‡πÅ‡∏•‡∏∞ metadata
export async function getAllTags() {
  try {
    const tags = await MemoryGraph.getAllTags();
    await Lineage.log("get_all_tags", { total: tags.length });
    return tags;
  } catch (error) {
    console.error("‚ùå Error getting all tags:", error);
    throw error;
  }
}

export async function searchByTag(tag, options = {}) {
  const { exact = false, limit = 50 } = options;
  
  try {
    const results = await MemoryGraph.searchByTag(tag, { exact, limit });
    await Lineage.log("search_by_tag", { tag, exact, results: results.length });
    return results;
  } catch (error) {
    console.error("‚ùå Error searching by tag:", error);
    throw error;
  }
}

// üìä Graph Operations - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Knowledge Graph
export const readGraph = async () => {
  try {
    const graph = await MemoryGraph.readGraph();
    await Lineage.log("read_graph", { nodes: graph.entities?.length || 0 });
    return graph;
  } catch (error) {
    console.error("‚ùå Error reading graph:", error);
    throw error;
  }
};

export const openNodes = async (names) => {
  try {
    const nodes = await MemoryGraph.openNodes(names);
    await Lineage.log("open_nodes", { names: names.length });
    return nodes;
  } catch (error) {
    console.error("‚ùå Error opening nodes:", error);
    throw error;
  }
};

export const searchNodes = async (query) => {
  try {
    const nodes = await MemoryGraph.searchNodes(query);
    await Lineage.log("search_nodes", { query, results: nodes.length });
    return nodes;
  } catch (error) {
    console.error("‚ùå Error searching nodes:", error);
    throw error;
  }
};

// üóëÔ∏è Deletion Operations - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á)
export const deleteEntities = async (entityNames) => {
  try {
    console.log(`üóëÔ∏è ‡∏•‡∏ö ${entityNames.length} entities (‡∏£‡∏∞‡∏ß‡∏±‡∏á: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ)`);
    const result = await MemoryGraph.deleteEntities(entityNames);
    await Lineage.log("delete_entities", { names: entityNames, count: result.deleted });
    return result;
  } catch (error) {
    console.error("‚ùå Error deleting entities:", error);
    throw error;
  }
};

export const deleteRelations = async (relations) => {
  try {
    const result = await MemoryGraph.deleteRelations(relations);
    await Lineage.log("delete_relations", { count: relations.length });
    return result;
  } catch (error) {
    console.error("‚ùå Error deleting relations:", error);
    throw error;
  }
};

export const deleteObservations = async (deletions) => {
  try {
    const result = await MemoryGraph.deleteObservations(deletions);
    await Lineage.log("delete_observations", { deletions: deletions.length });
    return result;
  } catch (error) {
    console.error("‚ùå Error deleting observations:", error);
    throw error;
  }
};

// ‚öôÔ∏è System Utilities - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö
export const validateStructure = async () => {
  try {
    const isValid = await System.validateStructure();
    await Lineage.log("validate_structure", { valid: isValid });
    return isValid;
  } catch (error) {
    console.error("‚ùå Error validating structure:", error);
    throw error;
  }
};

export const selfDescribe = async () => {
  try {
    const description = await System.selfDescribe();
    await Lineage.log("self_describe", {});
    return description;
  } catch (error) {
    console.error("‚ùå Error self-describing:", error);
    throw error;
  }
};

// üîå Export Submodules - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö granular
export {
  MemoryGraph,
  Memory0,
  System,
  Embedding,  // Mock - ‡∏à‡∏∞ implement ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  AutoTag,    // Mock - ‡∏à‡∏∞ implement ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  Lineage
};

// üß™ Utility Functions - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
export function generateEntityId(name, type) {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 8);
  return `${name}_${type}_${timestamp}_${random}`;
}

export function validateEntity(entity) {
  const required = ['name', 'type'];
  const missing = required.filter(field => !entity[field]);
  
  if (missing.length > 0) {
    throw new Error(`Entity missing required fields: ${missing.join(', ')}`);
  }
  
  if (!entity.name || typeof entity.name !== 'string' || entity.name.trim().length === 0) {
    throw new Error('Entity name must be a non-empty string');
  }
  
  return true;
}

export function validateRelation(relation) {
  const required = ['from', 'to', 'relationType'];
  const missing = required.filter(field => !relation[field]);
  
  if (missing.length > 0) {
    throw new Error(`Relation missing required fields: ${missing.join(', ')}`);
  }
  
  return true;
}

// üìà Health Check - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
export async function healthCheck() {
  const status = {
    timestamp: new Date().toISOString(),
    modules: {
      memoryGraph: 'ready',
      memory0: 'ready',
      system: 'ready',
      embedding: 'mock',  // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà implement ‡∏à‡∏£‡∏¥‡∏á
      autoTag: 'mock',    // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà implement ‡∏à‡∏£‡∏¥‡∏á
      lineage: 'ready'
    },
    storage: {
      memoryStore: false,
      lineageLog: false
    }
  };
  
  try {
    await fs.access(path.join(process.cwd(), 'memory', 'memory_store.json'));
    status.storage.memoryStore = true;
  } catch {}
  
  try {
    await fs.access(path.join(process.cwd(), 'memory', 'lineage_log.json'));
    status.storage.lineageLog = true;
  } catch {}
  
  // Test basic connectivity
  try {
    const root = await Memory0.getRootMemory();
    status.rootMemory = root ? 'exists' : 'missing';
  } catch {
    status.rootMemory = 'error';
  }
  
  console.log("üè• Health check:", status);
  return status;
}
