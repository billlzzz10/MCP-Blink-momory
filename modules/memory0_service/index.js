// modules/memory0_service/index.js - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ root memory node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Knowledge Graph
import fs from 'fs/promises';
import path from 'path';

// Root memory node structure
const ROOT_MEMORY = {
  id: "memory0",
  name: "Root",
  type: "memory", 
  relationType: "root",
  observations: [
    "Default root memory profile created for Explicit Agent Protocol"
  ],
  links: [],
  data: {},
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  sig: "memory0::root::memory0",
  key: "memory0::root::Root"
};

// Path to memory store
const MEMORY_STORE_PATH = path.join(process.cwd(), 'memory', 'memory_store.json');

export async function ensureRoot() {
  try {
    // ‡∏≠‡πà‡∏≤‡∏ô memory store ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    let memoryStore = [];
    try {
      const data = await fs.readFile(MEMORY_STORE_PATH, 'utf8');
      memoryStore = JSON.parse(data);
    } catch (error) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
      console.log("‚ö†Ô∏è  Memory store ‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ root memory ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const rootExists = memoryStore.some(entity => entity.id === "memory0");
    
    if (!rootExists) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° root memory ‡πÄ‡∏Ç‡πâ‡∏≤ store
      memoryStore.unshift(ROOT_MEMORY);
      
      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå
      await fs.writeFile(MEMORY_STORE_PATH, JSON.stringify(memoryStore, null, 2), 'utf8');
      console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Root memory node ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timestamp
      ROOT_MEMORY.updatedAt = new Date().toISOString();
      return ROOT_MEMORY;
    } else {
      console.log("‚ÑπÔ∏è  Root memory node ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");
      // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ root node ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      return memoryStore.find(e => e.id === "memory0");
    }
  } catch (error) {
    console.error("‚ùå Error in ensureRoot:", error);
    throw error;
  }
}

export async function linkToRoot(entityNames) {
  try {
    // ‡∏≠‡πà‡∏≤‡∏ô memory store
    const data = await fs.readFile(MEMORY_STORE_PATH, 'utf8');
    let memoryStore = JSON.parse(data);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á relations ‡∏à‡∏≤‡∏Å root ‡πÑ‡∏õ‡∏¢‡∏±‡∏á entities
    const relations = entityNames.map(name => ({
      from: "memory0",
      to: name,
      relationType: "contains"
    }));
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° links ‡πÉ‡∏ô root node
    ROOT_MEMORY.links = [...new Set([...ROOT_MEMORY.links, ...entityNames])];
    ROOT_MEMORY.updatedAt = new Date().toISOString();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï memory store
    const rootIndex = memoryStore.findIndex(e => e.id === "memory0");
    if (rootIndex !== -1) {
      memoryStore[rootIndex] = ROOT_MEMORY;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö
    await fs.writeFile(MEMORY_STORE_PATH, JSON.stringify(memoryStore, null, 2), 'utf8');
    
    console.log(`üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå ${entityNames.length} entities ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Root memory`);
    return relations;
  } catch (error) {
    console.error("‚ùå Error in linkToRoot:", error);
    throw error;
  }
}

export async function getRootMemory() {
  try {
    const data = await fs.readFile(MEMORY_STORE_PATH, 'utf8');
    const memoryStore = JSON.parse(data);
    return memoryStore.find(e => e.id === "memory0") || null;
  } catch (error) {
    console.error("‚ùå Error getting root memory:", error);
    return null;
  }
}

export async function updateRootObservation(observation) {
  try {
    const data = await fs.readFile(MEMORY_STORE_PATH, 'utf8');
    let memoryStore = JSON.parse(data);
    
    const rootIndex = memoryStore.findIndex(e => e.id === "memory0");
    if (rootIndex !== -1) {
      memoryStore[rootIndex].observations.push(observation);
      memoryStore[rootIndex].updatedAt = new Date().toISOString();
      
      await fs.writeFile(MEMORY_STORE_PATH, JSON.stringify(memoryStore, null, 2), 'utf8');
      console.log("üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï observation ‡πÉ‡∏ô Root memory");
      return true;
    }
    return false;
  } catch (error) {
    console.error("‚ùå Error updating root observation:", error);
    throw error;
  }
}

// Export root memory structure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô
export { ROOT_MEMORY };